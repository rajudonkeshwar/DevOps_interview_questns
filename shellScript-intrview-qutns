#!/bin/bash explain about it in huma understandable format?
ans:  Shebang --> It should be the first line of shell script. 
      It is the interpreter to execute the commands  and syntax inside shell script

 What is Bash?
ans: It's a command-line interpreter (shell) used in Linux and macOS systems to:
     Run commands
     Automate tasks using scripts
     Interact with the operating system.
            Bash is a program that lets you talk to your computer by typing text commands instead of clicking things.
     Think of Bash as the "translator" between you and the computer's operating system.


Can you tell me about special variables in shell scripting?
ans:  $1, $2, $3 ( these are used as aruguments for functions, when you send data to the function it will strore those like first value in $1,
      second value in $2)
      All variables passed: $@
      number of variables: $#
      script name: $0
      present working directory: $PWD
      home directory of current user: $HOME
      which user is running this script: $USER
      process id of current script: $$
      process id of last command in background: $!


How can you check previous command is success or not in shell script?
ans: By checking the exit status, if exit status is 0 it is success, otherwise it is failure
      to check exit status we should use "$?"


How do we check in shellScript that whether are we running in sudo access or not?
ans: When $(id -u) returns zero then we are running with sudo access, we can able to install commands
      if it returns 1 we are not running it with sudo access, make sure that we are running with sudo access, then run commands
      check if the user running the script is root user or not
      if root user
      	allow him
      else
      	show the error properly and exit the script
      run install command
      check installation is success
      if success, our task is done
      if not success, throw the error message


What is the difference Psudo and root?
ans: 1. What is root?
      Root is the superuser account in Unix/Linux systems.
      It has unrestricted access to all files, commands, and system configurations.
      The username is literally root, and its User ID (UID) is always 0.
      It can delete critical files, install software, change permissions, manage users, and more ‚Äî essentially do anything.
      ‚ö†Ô∏è Risks of Using Root:
      Logging in directly as root is dangerous because a single mistake (like deleting /) can break the whole system.
      That's why many modern systems discourage or disable direct root login.


      2. What is sudo?
      sudo stands for "superuser do".
      It allows authorized users (non-root users) to execute commands as the root user (or another user), temporarily.
      It's a safer way to perform administrative tasks without logging in as root.
      üîß How it works:
      Users need to be listed in the /etc/sudoers file (or in a group like sudo or wheel).
      <user-name>  ALL=(ALL:ALL) ALL


What are the redirectors in shell scripting?
ans: Basically redirectors are used stores output of the commands called it as standrd output(stdout) to the files,
     or read the data from the files

      suppose you have created file1 and file2, you did ls -l command to list these files right,
      if you want to store the output of the command you follows below
      1) ls -l >> logFile.log (it stores the output)
      2) ls -l 1>> logFile.log (It will stores success output only)
      3) ls -l 2>> logFile.log ( It will stores failure output only)
      4) ls -l &>> logFiles.log (It will stores both success ouput and failure output)
      5) Takes stdin from a file instead of user input: sort < data.txt


Can You tell me the challenges you faced recently?
Ans: Basically applications will generate logs continuously, if the log files increased the memory get full, eventually
     servers properly not respond, to avoid this situation we should daily schedule few jobs, then run it in particular time
     every day using cron tab and archive the logs and move it to seperate folder.
     If you want to store any historical data or logs then we should archive it.
     => Pick up from source directory
     => Zip the files that we have taken
     => Place themin destination directory
     => If user provides number of days, we take them otherwise we take 14-days by defaul

     Error Handling:
      => User may forgot to give source directory or destination directory
         I handles this situation using this command **! -d "$SOURCE_DIR"**, i keeps it in if block if directory is present
         then go a head if not throw error message in this way i handled it.

      => There might be any chance of losting of data in source directory, so we need to check whether the data was present are not
         for that i used the command called ** -n <file-name> **, i kept it in if block it checks whether the data is present or not
         in sourece file

      => Then i created a zipFile varible and i make it to indicate the destination directory, then i zipped the data in to the destination
         file using this command that is
                  ZIP_FILE="$DEST_DIR/app-logs-$TIMESTAMP.zip"
                  find $SOURCE_DIR -name "*.log" -mtime +$DAYS | zip -@ "$ZIP_FILE"

      => I filtered the data before 14 days from the usage by using (-mtime +14) option in command.
          This is how i handled this task, while doing this task i got some errors but they are minimal yaa sir thats all sir


Can you tell me about read -p command in shellScript?
ANS:       read -p "Enter your name: " name
           echo "Hello, $name!"
      This is the command i have been used, by using this command you can enter data through prompt in command line, parallally we 
      can set a variable to hold this data, that how i did it
      






