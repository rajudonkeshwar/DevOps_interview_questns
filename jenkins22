1) What is a Jenkins pipeline?
ans: A pipeline is combination of steps writes it in a script, where we take care software development process through steps which includes
integration of the code from source, installing dependencies, running unit test cases, building and scaning the image, finally deploying it
in to dev or prod environment, instead of doing it manually, we can automate through CI-CD process using jenkins pipeline.


2) What is the difference between freestyle project and pipeline?
“In Jenkins we mainly have two approaches: Freestyle projects and Pipelines.
Freestyle is the traditional way, where we configure everything through the Jenkins UI. 
It’s simple and quick for small jobs, like pulling code from Git, running a build command, 
or archiving artifacts. But it has limitations — it’s not easy to handle complex workflows, 
parallel execution, or version control of the job itself.

On the other hand, Pipeline projects are more advanced and follow the concept of Pipeline as Code. 
Here, we define the entire CI/CD flow in a Jenkinsfile, which is stored in source control 
along with the application code. Pipelines are highly flexible, 
they support multiple stages, parallel builds, approvals, and can easily integrate with tools like Docker, Kubernetes, and AWS.
So, in simple terms: I use Freestyle for small, one-off jobs, but for real-world CI/CD setups, 
I prefer Pipelines because they are maintainable, scalable, and version-controlled.”

3) What are the types of pipelines in Jenkins?
“In Jenkins we have two main types of pipelines: Declarative and Scripted. 
Declarative is the most common — it’s simple, structured, and easy to maintain with stages and steps. 
Scripted pipelines are written fully in Groovy, which gives more flexibility but requires more coding. 
In practice, I usually prefer declarative for CI/CD, and use scripted only when I need advanced custom logic.”

4) what is jenkins file?
ans: “A Jenkinsfile is basically a text file that contains the definition of a Jenkins pipeline. 
      Instead of configuring jobs manually in the Jenkins UI, we write the pipeline as code inside this file. 
      It usually there in the project’s source code repository, so the CI/CD process is version-controlled along with the application.

      In the Jenkinsfile we can define different stages like build, test, code quality scan, Docker image build, and deployment. 
      This makes the pipeline reusable, easy to maintain, and transparent for the whole team. In my projects, 
      we typically commit the Jenkinsfile to Git, so whenever a developer pushes changes, Jenkins automatically picks up the 
      Jenkinsfile and executes the pipeline.”

5) In your project where jenkins is installed?
ans: “Jenkins can be installed on different platforms depending on the setup. It can run on a local machine, 
      on a dedicated server, or inside a container. In many projects, we install Jenkins on a Linux server, 
      either on-prem or in the cloud like AWS EC2. It can also be run as a Docker container, which makes it easier to manage and scale.

      In my experience, I’ve mostly worked with Jenkins installed on Linux servers and sometimes as a Dockerized 
      Jenkins in cloud environments, because it gives more flexibility and integration with other DevOps tools.”


6) What prerequisite should i need to install jenkins? and how do i update jenkins version?
ANS: “To install Jenkins, t  he main prerequisite is Java, since Jenkins is a Java-based application. 
So we need a supported JDK installed and properly configured with JAVA_HOME. Apart from that, 
we need a stable network connection, proper user permissions, and depending on the OS, 
tools like wget or curl to download the Jenkins package. If we’re installing on Linux, 
we also make sure the system packages are up to date and ports like 8080 are open.

For updating Jenkins, there are two ways. If it’s installed from a package manager like apt or yum, 
I just update it with the package manager commands. For example, on Ubuntu we run apt-get update && apt-get upgrade jenkins. 
If it’s installed via a WAR file, I download the latest Jenkins WAR from the official site, replace the old one, and restart Jenkins. 
I also make sure to take a backup before upgrading, especially of the Jenkins home directory, to avoid data loss.
In my experience, I’ve mostly worked on Linux servers, 
so I’ve used both package manager upgrades and WAR file replacements depending on how Jenkins was set up in the project.”


7) How do you configure a job in Jenkins?
ans: “To configure a job in Jenkins, I usually start by creating a new item and choosing the type, like Freestyle or Pipeline. 
For a Freestyle job, I configure the source code repository details, set the build triggers like Git webhooks or scheduled builds, 
then define the build steps — for example running Maven, npm, or shell scripts — and finally configure post-build actions 
such as archiving artifacts or sending notifications.

For Pipeline jobs, instead of manually configuring steps, I point Jenkins to the Jenkinsfile in the repository. 
That way, the entire CI/CD process is defined as code, including build, test, and deployment stages. 
This approach is more maintainable and version-controlled.

In my projects, I mostly configure jobs through Pipelines with Jenkinsfile, but for simple one-off tasks I still use Freestyle.”


8) what is the difference between pollSCM and GitHub hook trigger?
Ans: With Poll SCM, Jenkins itself keeps checking the Git repository at regular intervals — 
     for example every 5 minutes — to see if there are any changes. If it finds new commits, it triggers a build. 
     The drawback is that Jenkins keeps polling even if there are no changes, so it puts unnecessary load on Jenkins and the Git server.

     With a GitHub hook trigger, it works the other way around. Instead of Jenkins polling, 
     GitHub sends a webhook notification to Jenkins as soon as there’s a push event. Jenkins then immediately triggers the build. 
     This is more efficient and real-time compared to Poll SCM.

     In practice, I prefer using GitHub webhooks, because it reduces load and makes the pipeline respond instantly to code changes.”

9) What are the executors in jenkins?
ans: “Executors in Jenkins decide how many jobs a node can run in parallel. For example, if a node has 2 executors, 
      it can run 2 builds at the same time; if all executors are busy, new jobs wait in the queue. 
      I usually set the number of executors based on the system’s CPU and memory so we get good parallelism without overloading the server.”

10) Difference between master and agent in jenkins?
ans: “In Jenkins, the master (or controller) is the brain of the system. It’s responsible for handling the web interface, 
      scheduling jobs, managing build pipelines, and keeping track of job configurations.

      The agents (or nodes) are the worker machines where the actual jobs run. The master assigns tasks to agents, 
      and the agents use their executors to execute builds. This way, Jenkins can distribute workloads across multiple machines.

      In real projects, I’ve used agents when we needed to run jobs on different environments — for example, 
      one agent for Linux builds, another for Windows, or even containerized agents in Kubernetes. 
      This helps with scalability and better resource utilization.”

11) How can you secure your jenkins in your project?
ans: “To secure Jenkins, I usually start with enabling proper authentication and authorization. 
      I integrate Jenkins with LDAP or Active Directory, or sometimes use Jenkins’ own user database, 
      and then apply role-based access control so users only get the permissions they need.
      Next, I secure the communication by enabling HTTPS with SSL certificates. I also make sure Jenkins runs on a restricted port, 
      and the underlying server’s firewall only allows trusted access.
      Another important part is plugin and system updates — I regularly update Jenkins and its plugins to patch security vulnerabilities. 
      I also restrict script approvals, secure credentials using the Jenkins credentials store, and avoid exposing sensitive data in pipelines.
      In real projects, I also integrate Jenkins with tools like Vault or AWS Secrets Manager for managing secrets, 
      and I always keep backups of the Jenkins home directory in case of any compromise.”
      




