1) What is AMI?
Ans: An AMI (Amazon Machine Image) is basically a template that contains the operating system, application server, and any software or configurations 
     needed to launch an EC2 instance. You can think of it as the "blueprint" for your virtual machines in AWS.
     When I launch an EC2 instance, I select an AMI, and that AMI determines what‚Äôs preinstalled on the instance‚Äîfor example, 
     whether it‚Äôs a Linux or Windows machine, or if it has additional software like Apache, Docker, or custom configurations.


2) What is the difference between ami and launch template?
Ans: An AMI (Amazon Machine Image) is the base image or blueprint that defines what‚Äôs inside an EC2 instance‚Äîthings like the operating system, 
     preinstalled software, and configurations. It answers the question: ‚ÄúWhat will my instance look like when it launches?‚Äù

     On the other hand, a Launch Template is a broader configuration that defines how the instance should be launched. 
     It includes not only the AMI ID but also instance type, key pair, security groups, networking settings, IAM roles, and other launch parameters.
    
    In short:
    AMI = What goes inside the instance (OS + software)
    Launch Template = How the instance is launched (AMI + instance type + networking + security + scaling configs)


3) Tell me something about EBS and EFS?
    Ans: 
    Both EBS (Elastic Block Store) and EFS (Elastic File System) are AWS storage services, but they serve different purposes.
    EBS is a block-level storage that attaches to a single EC2 instance (like a virtual hard drive). 
    It‚Äôs great for databases, applications, or workloads that need low-latency storage. 
    EBS volumes are tied to one Availability Zone, but we can take snapshots to back them up or move them.

    EFS is a fully managed network file system that can be mounted by multiple EC2 instances 
    across multiple Availability Zones at the same time. It provides shared storage, scales automatically as data grows, 
    and is ideal for scenarios like content management, big data analytics, 
    or when multiple servers need access to the same files (Web Applications with Shared Content).
    In real-time
    I‚Äôve used EBS for application servers and databases, where each instance needs its own dedicated storage.
    I‚Äôve used EFS for web applications where multiple EC2 instances (behind a load balancer) needed to share the same static content.
    So in short:
    EBS = Single-instance block storage (like a hard disk)
    EFS = Multi-instance shared file storage (like a network drive)



4) What is the difference between IAM Role and IAM User ?

Ans: An IAM User is a permanent identity created for an individual or application that needs long-term access to AWS. 
It has associated credentials like username/password or access keys. For example, 
I might create an IAM user for a developer who needs to log in to the AWS console or use CLI.

An IAM Role, on the other hand, is a temporary identity with permissions that can be assumed by AWS services, 
applications, or even users, granting them temporary security credentials to make aws api calls.
IAM roles are not directly associated with specific users or group, they are intended to be assumable by anyone
who needs them.
Roles don‚Äôt have permanent credentials; instead, they provide temporary security tokens. 
For example, an EC2 instance can assume a role to access S3 without embedding access keys.

üëâ In short:
IAM User = Long-term identity with permanent credentials
IAM Role = Temporary identity assumed by trusted entities, with no long-term credentials
In real-time, I‚Äôve used:
IAM Users for team members who need direct access with MFA.
IAM Roles for EC2, Lambda, and CI/CD pipelines to securely access resources without hardcoding credentials.


5) What are the types of storage in AWS?

ans: AWS offers different types of storage services, each designed for specific use cases:
Amazon S3 (Simple Storage Service) ‚Äì Object storage. It‚Äôs highly durable and scalable, mainly used for backups, 
static content, logs, and data lakes.
Amazon EBS (Elastic Block Store) ‚Äì Block storage. It works like a virtual hard disk for EC2 instances. 
Best for databases and applications requiring low-latency access.
Amazon EFS (Elastic File System) ‚Äì File storage. A shared file system that can be mounted across multiple EC2 instances, 
useful for content management and web apps.

6) What are the types of Load Balancers in AWS, can you explain me about them?
ans:
1. Application Load Balancer (ALB)
Operates at Layer 7 (Application Layer).
Best for web applications since it understands HTTP/HTTPS protocols.
Supports advanced routing:
Host-based routing (e.g., send traffic for api.example.com to one target group, app.example.com to another).
Path-based routing (e.g., /images goes to one service, /videos to another).
Supports SSL termination, WebSockets, HTTP/2, and integrates with ECS/EKS for containerized workloads.

‚úÖ Real-time use: I‚Äôve used ALB in a microservices architecture, where traffic was routed to different services based on URL paths. 
It helped simplify deployments and improve scalability.


2. Network Load Balancer (NLB)
Operates at Layer 4 (Transport Layer).
Designed for high-performance workloads ‚Äî handles millions of requests per second with ultra-low latency.
Supports TCP, UDP, and TLS traffic.
Provides a static IP or Elastic IP per Availability Zone, which is useful for whitelisting.
Often used for latency-sensitive applications like gaming, financial systems, or real-time communications.

‚úÖ Real-time use: I‚Äôve configured NLB for an internal payment processing system that required very low latency and high throughput.



3. Classic Load Balancer (CLB) (Legacy)
Supports both Layer 4 and Layer 7, but with limited features compared to ALB/NLB.
AWS recommends using ALB or NLB instead for new applications.
Still used in legacy environments where applications were designed around it.
‚úÖ Real-time use: I‚Äôve come across CLB mainly in older projects where migrating to ALB/NLB wasn‚Äôt immediately feasible.



4. Gateway Load Balancer (GWLB)
Operates at Layer 3 (Network Layer).
Used to deploy, scale, and manage third-party virtual appliances like firewalls, 
intrusion detection/prevention systems (IDS/IPS), and packet inspection tools.
It combines transparent network gateway and load balancing, making it easy to integrate security appliances in your traffic flow.

‚úÖ Real-time use: In one project, we used GWLB with a Palo Alto firewall appliance to inspect and filter inbound traffic 
before it reached the VPC workloads.



Summary (Quick Interview Line):
ALB ‚Üí Layer 7, intelligent routing for web/microservices.
NLB ‚Üí Layer 4, ultra-low latency, millions of requests/sec.
CLB ‚Üí Legacy, limited features.
GWLB ‚Üí Layer 3, integrates third-party security appliances.



7) What is route53?

Answer:
Amazon Route 53 is AWS‚Äôs scalable and highly available DNS (Domain Name System) service. It‚Äôs named Route 53 because DNS works on port 53.
It mainly provides three functions:
Domain Registration ‚Äì You can register and manage domain names directly in Route 53.
DNS Routing ‚Äì It translates human-readable domain names (like example.com) into IP addresses so users can connect to applications. 
It supports different routing policies such as Simple, Weighted, Latency-based, Failover, Geolocation, and Multi-value routing.
Health Checks & Monitoring ‚Äì It can check the health of endpoints and route traffic away from unhealthy resources, improving reliability.

‚úÖ Real-time use:
In one project, I used Route 53 to manage DNS for a web application hosted on EC2 and S3. 
We configured Latency-based routing so users from the US were served from the US region 
and users from Asia from the Singapore region, reducing latency.
I‚Äôve also set up failover routing with Route 53 so that if the primary web server goes down, 
traffic automatically shifts to a standby server in another region.
So, Route 53 is not just a DNS service but also plays a key role in global traffic management, 
high availability, and disaster recovery.
