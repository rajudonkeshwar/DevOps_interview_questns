1))))   Let’s begin with the basics. What is Ansible?
Ansible is an open-source platform that facilitates configuration management, 
task automation, or application deployment. 
It is a valuable DevOps tool. It was written in Python and powered by Red Hat



2))))   Describe how Ansible works?
You can start this way - ansible is broken down into two types of servers: controlling machines and nodes. 
Ansible is installed on the controlling machines, and the controlling machines manage the nodes via SSH. 
The controlling machine contains an inventory file that holds the node system’s location. 
Ansible runs the playbook on the controlling machine to deploy the modules and the packages on the node systems. 
Since Ansible is agentless, there’s no need for a third-party tool to connect the nodes.



3))))  Explain what a “playbook” is?
A playbook is a YAML-based file that sends commands to remote computers for configuration via scripts.
Devops engineers can configure entire environments by passing a script to the required systems rather
than using individual commands to configure computers from the command line remotely.


- name: Configure web servers
  hosts: webservers
  vars:
    http_port: 80
  tasks:
    - name: Install Nginx
      ansible.builtin.package:
        name: nginx
        state: present
    - name: Start Nginx
      ansible.builtin.service:
        name: nginx
        state: started
  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

                


4))))  What is “idempotency”?
idempotency is an important Ansible feature. It prevents unnecessary changes in the managed hosts. 
With idempotency, you can execute one or more tasks on a server as many times as you can, 
but it won’t change anything that’s already been modified and it will give same output. 





5)))) What are roles in ansible?
In ansible roles are ways to arganize and structure your playbooks in a more reusable manner,
Roles simplify complex playbooks by grouping tasks, variables, files, templates, and handlers 
into a defined directory structure, that can easily shared and reused across different playbooks

  roles/
  <role_name>/
    tasks/
      main.yml          # Defines the list of tasks for the role
    handlers/
      main.yml          # Contains handlers triggered by tasks
    files/              
      # Static files to be copied to managed nodes
    templates/          
      # Jinja2 templates for dynamic file generation
    vars/
      main.yml          # Role-specific variables
    defaults/
      main.yml          # Default variables (overridable)
    meta/
      main.yml          # Role metadata (dependencies, etc.)
    tests/
      test.yml          # Test playbook for the role
    README.md           # Documentation for the role





6))))What are Handlers in Ansible?
In Ansible, handlers are special tasks that are executed only when they are explicitly "notified" by other tasks. 
They are primarily used to perform actions that should happen only after a change is made, 
such as restarting a service after modifying its configuration file.

                - name: Configure Apache
                  hosts: webservers
                  tasks:
                    - name: Install Apache
                      apt:
                        name: apache2
                        state: present
                
                    - name: Update Apache configuration
                      copy:
                        src: /path/to/httpd.conf
                        dest: /etc/apache2/httpd.conf
                      notify: Restart Apache
                
                  handlers:
                    - name: Restart Apache
                      service:
                        name: apache2
                        state: restarted


7)))) Define registers in ansible?
In Ansible, registers are used to capture and store the result of a task in a variable. 
These variables can be used in subsequent tasks, or debugging purposes. 
Registers are a crucial feature of Ansible that allow dynamic interaction with the environment being automated.

                - name: Check if a file exists
                  stat:
                    path: /path/to/file
                  register: file_status
                
                - name: Perform an action if the file exists
                  debug:
                    msg: "File exists!"
                  when: file_status.stat.exists




8)))) explain about setup module?

In Ansible, the setup module is a core module used to gather and retrieve detailed information about the target system. 
This information, often referred to as facts, includes system properties like IP addresses, operating system details, 
CPU architecture, memory, disk usage, and much more. 
These facts are stored as variables and can be used in subsequent tasks within the playbook.




9))))ansible_facts:::  ansible_facts is variable will stores the all the gathered information 
                        taken by ansible.builtin.setup module from remote server


1. System Information
  Fact Name	                    Description	                            ExampleValues
  ansible_hostname	            The hostname of the target system.	    webserver1
  ansible_domain	              Domain name of the target system.	      example.com
  ansible_fqdn	                Fully qualified domain name.	          webserver1.example.com
  ansible_machine	              System architecture.	                  x86_64,armv7l
  ansible_os_family	            Operating system family.	              Debian, RedHat, Windows
  ansible_distribution	          Name of the operating system.	          Ubuntu, CentOS, Windows
  ansible_distribution_version	  OS version.	                            22.04, 7, 10



2. Network Information
Fact Name	                        Description	                                ExampleValues
ansible_default_ipv4.address	    Default IPv4 address of the system.	        192.168.1.10
ansible_default_ipv6.address	    Default IPv6 address of the system.	        fe80::1
ansible_interfaces	              List of network interfaces.	                [ 'eth0', 'lo', 'wlan0']
ansible_all_ipv4_addresses	      All IPv4 addresses assigned to the system.	['192.168.1.10', '10.0.0.1']
ansible_all_ipv6_addresses	      All IPv6 addresses assigned to the system.	['fe80::1', '::1']



3. Hardware Information
Fact                                     Name	Description	                      ExampleValues
ansible_processor	                       List of CPU model(s).	                ['Intel(R) Xeon(R) CPU', ...]
ansible_processor_count	                 Number of physical processors.	        2
ansible_processor_cores	                 Number of cores per processor.	        4
ansible_memtotal_mb	                     Total memory in MB.	                  8192
ansible_memfree_mb	                     Free memory in MB.	                    4096
ansible_virtualization_type	             Virtualization technology (if any).	  kvm, docker, none
ansible_architecture	                  System architecture.	                  x86_64, arm64


4. Disk and Filesystem
Fact Name	              Description	                          ExampleValues
ansible_mounts	        List of mounted filesystems.	        [{'device': '/dev/sda1', ...}]
ansible_disk	          Information about disk devices.	      {'sda': {'size_total': ...}}
ansible_devices	        List of disk devices.	                ['sda', 'sdb']










        




                  









