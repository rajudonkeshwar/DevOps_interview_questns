1))))   Let’s begin with the basics. What is Ansible?
Ansible is an open-source platform that facilitates configuration management, 
task automation, or application deployment. 
It is a valuable DevOps tool. It was written in Python and powered by Red Hat



2))))   Describe how Ansible works?
You can start this way - ansible is broken down into two types of servers: controlling machines and nodes. 
Ansible is installed on the controlling machines, and the controlling machines manage the nodes via SSH. 
The controlling machine contains an inventory file that holds the node system’s location. 
Ansible runs the playbook on the controlling machine to deploy the modules and the packages on the node systems. 
Since Ansible is agentless, there’s no need for a third-party tool to connect the nodes.



3))))  Explain what a “playbook” is?
A playbook is a YAML-based file that sends commands to remote computers for configuration via scripts.
Devops engineers can configure entire environments by passing a script to the required systems rather
than using individual commands to configure computers from the command line remotely.


- name: Configure web servers
  hosts: webservers
  vars:
    http_port: 80
  tasks:
    - name: Install Nginx
      ansible.builtin.package:
        name: nginx
        state: present
    - name: Start Nginx
      ansible.builtin.service:
        name: nginx
        state: started
  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

                


4))))  What is “idempotency”?
idempotency is an important Ansible feature. It prevents unnecessary changes in the managed hosts. 
With idempotency, you can execute one or more tasks on a server as many times as you can, 
but it won’t change anything that’s already been modified and it will give same output. 





5)))) What are roles in ansible?
In ansible roles are ways to arganize and structure your playbooks in a more reusable manner,
Roles simplify complex playbooks by grouping tasks, variables, files, templates, and handlers 
into a defined directory structure, that can easily shared and reused across different playbooks

  roles/
  <role_name>/
    tasks/
      main.yml          # Defines the list of tasks for the role
    handlers/
      main.yml          # Contains handlers triggered by tasks
    files/              
      # Static files to be copied to managed nodes
    templates/          
      # Jinja2 templates for dynamic file generation
    vars/
      main.yml          # Role-specific variables
    defaults/
      main.yml          # Default variables (overridable)
    meta/
      main.yml          # Role metadata (dependencies, etc.)
    tests/
      test.yml          # Test playbook for the role
    README.md           # Documentation for the role





6))))What are Handlers in Ansible?
In Ansible, handlers are special tasks that are executed only when they are explicitly "notified" by other tasks. 
They are primarily used to perform actions that should happen only after a change is made, 
such as restarting a service after modifying its configuration file.

                - name: Configure Apache
                  hosts: webservers
                  tasks:
                    - name: Install Apache
                      apt:
                        name: apache2
                        state: present
                
                    - name: Update Apache configuration
                      copy:
                        src: /path/to/httpd.conf
                        dest: /etc/apache2/httpd.conf
                      notify: Restart Apache
                
                  handlers:
                    - name: Restart Apache
                      service:
                        name: apache2
                        state: restarted


7)))) Define registers in ansible?
In Ansible, registers are used to capture and store the result of a task in a variable. 
These variables can be used in subsequent tasks, or debugging purposes. 
Registers are a crucial feature of Ansible that allow dynamic interaction with the environment being automated.

                - name: Check if a file exists
                  stat:
                    path: /path/to/file
                  register: file_status
                
                - name: Perform an action if the file exists
                  debug:
                    msg: "File exists!"
                  when: file_status.stat.exists




8)))) explain about setup module?

In Ansible, the setup module is a core module used to gather and retrieve detailed information about the target system. 
This information, often referred to as facts, includes system properties like IP addresses, operating system details, 
CPU architecture, memory, disk usage, and much more. 
These facts are stored as variables and can be used in subsequent tasks within the playbook.




9))))ansible_facts:::  ansible_facts is variable will stores the all the gathered information 
                        taken by ansible.builtin.setup module from remote server


10))) What are the components of Ansible?
      Answer:
      Inventory – Defines hosts and groups of servers.
      Modules – Predefined scripts for performing tasks (e.g., yum, apt, copy).
      Playbooks – YAML files defining automation workflows.
      Roles – Reusable playbooks with tasks, handlers, and templates.
      Facts – System information collected from managed nodes.
      Handlers – Special tasks triggered by changes.


11))) What is Ansible Vault?
  Ansible Vault is a security feature in Ansible that allows you to encript and protect sensitive information 
  like passwords, API keys, SSH keys, and confidential configuration files. 
  This ensures that secret data is not exposed in playbooks, Git repositories, or while sharing files with a team.
  
  1. Creating a New Encrypted File
         **ansible-vault encrypt secrets.yml**
     You’ll be asked to enter a password.
     The file will open in an editor (e.g., Vim or Nano).
     Add sensitive data inside and save it.
     The file is now encrypted and can only be accessed with the correct password.
  
  2. Decrypting a File
  If you need to convert an encrypted file back to plaintext:
          **ansible-vault decrypt secret.yml**
  
  3. Edit an encrypted file:
          **ansible-vault edit secrets.yml**

  4. use vault file in a playbook
              vars_files:
              - secrets.yml

  5. If a playbook references an encrypted file, Ansible will ask 
     for the vault password when running:
          **ansible-playbook playbook.yml --ask-vault-pass**

    You can do configuration in configuration file by addind as **ask_vault_pass = True**
        so that it will ask for password when you are entering the command



12)))) Difference Between command and shell Modules in Ansible

      Ansible provides two similar modules for running commands on remote machines:
      command module
      shell module
      Both modules are used to execute system commands, but they have important differences 
      in how they handle commands, especially regarding shell features like pipes (|), 
      redirections (>, <), and variables ($HOME, $(command), &&, ||).

      =====command Module========
      The command module is safer because it executes commands directly without invoking a shell (/bin/sh or /bin/bash).
      ✅ Key Features of command Module
      ✔️ More secure – does not allow shell operators (like |, &&, ;)
      ✔️ Faster – since it avoids loading a full shell environment
      ✔️ Works well for running simple system commands
      example:
          - name: List files in /tmp directory
            ansible.builtin.command: ls /tmp


      =======shell Module========
      The shell module executes commands through a shell (/bin/sh or /bin/bash), 
      allowing shell features like pipes, redirections, and variables.
      ✅ Key Features of shell Module
      ✔️ Supports pipes (|), redirections (>, <), and command chaining (&&, ||)
      ✔️ Supports environment variable expansion ($HOME, $(command))
      ✔️ Can execute scripts or inline shell commands
      examples:
          - name: Count files in /tmp using shell
            ansible.builtin.shell: ls /tmp | wc -l

      Key Takeaway
      Use command whenever possible for better security and performance.
      Use shell only if you need shell features like pipes, redirection, or variable expansion.


13)))  How do you use loops in Ansible?
       Loops allow you to run a task multiple times for different input
       - name: Install multiple packages
         apt:
            name: "{{ item }}"
            state: present
         loop:
            - nginx
            - git
            - curl





      













        




                  









