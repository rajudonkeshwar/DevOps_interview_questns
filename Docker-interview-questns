1) What is Docker File?
  Docker file is a file it has docker instructions to create our own images, this file declarative in nature means
  what we writes we will get it

2) What is the Docker?
  Docker is the containerization platform and it is used to manage the lifecycle of containers,
  I use docker basically, write some docker files, build the docker images, runs some docker containers, 
  push them to ECR

3) How containers are different from virtual machines?
Ans: Continers are very lightweight in nature, because they dont have complete OS, 
     It is basically combination of your application, its dependencies, some libraries 
     which are requird to run your application
     Where as Virtual Machines has complete guest OS, we all know operating systems are very heavy,
     and it has very OSImage.

4) What is docker Lifecycle?
Ans: The docker life cycle is nothing but, writing a docker file, building docker image, pushing them to ECR
    In my case what i usually do is i start with writing a dockerfile, lets say development team was approched me, 
    i will initially start with writing a docker file, in the docker file i will write set -of -instructions, 
    that are required to run the application Once i feel the docker file is complete, i will create image out of it 
    by running docker build command, which will essentially convert your docker files to docker images
    After that you can use docker run command to execute your container, Finally you push the image to docker registry

5) What are the different docker compments?
Ans: Basically we have three docker components
    1) Clint
    2) DockerHost
    3) Registry
    Initially when you install docker parallelly you have installed docker clint, docker host, this docker clint will give a interface
    to run docker commands such as docker build, docker run, docker exec, but the docker host(deamon) is responsible for executing those
    commands that you have entered.
    Lets say there is a docker clint in your system, as a user you want to execute a docker build command to create an image, what happens
    is this request is received by the docker deamon, and it will executes it and will create an image as a result.
    Then we will push this image to the docker registry, these are the different type of components


6) Detailed explanation about networking?
Ans: When you run containers in Docker, they need some way to communicate ‚Äî either with each other, with the host machine, or 
    with the outside world. That‚Äôs where Docker networking comes in. Docker basically gives you a few different types of networks 
    depending on what kind of communication your app needs.

  üö¢ 1. Bridge Network (most common)
  This is the defaultone Docker uses if you don‚Äôt specify anything. Imagine you have a few containers running on the same machine, 
  and you want them to talk to each other ‚Äî that‚Äôs where the bridge network comes in.
  Docker creates a virtual network bridge (called docker0) on the host. Each container gets its own IP in that network, and they can 
  ping or talk to each other using those IPs or even container names. You can also expose ports to the outside using -p.
  Use case? Let‚Äôs say you have a backend and database container on one server ‚Äî the bridge network lets them talk easily.


  üè† 2. Host Network
  Here, the container doesn‚Äôt get its own network namespace. Instead, it shares the host‚Äôs network directly. 
  So it can use the host‚Äôs 
  IP and ports.
  It‚Äôs faster because there‚Äôs no network translation, but it comes with fewer layers of isolation. For example, 
  if you run an app on port 80 in a container, it‚Äôll occupy port 80 on your host directly.
  Use case? High-performance apps like monitoring agents or network tools.


  üåê 4. Overlay Network
  This one‚Äôs for multi-host setups ‚Äî like when you‚Äôre using Docker Swarm or Kubernetes. It lets containers on different machines 
  talk to each other as if they‚Äôre on the same local network.
  Under the hood, it uses VXLAN (a kind of tunneling). You need a key-value store to manage it (Swarm handles this for you).
  Use case? When you deploy microservices across multiple machines.


  


