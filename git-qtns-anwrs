
ðŸ”¹ Git Interview Questions & Answers (3+ Years DevOps Experience)
1. What is Git and why do we use it in DevOps?
Answer:
"Git is a distributed version control system that helps teams track changes in source code. 
In DevOps, itâ€™s the backbone of our CI/CD pipelines â€” developers push code to Git repositories, 
and that triggers automated builds, tests, and deployments. 
It also enables collaboration, rollback to previous versions, and branching strategies for parallel development."



2. Can you explain the branching strategy you used in your projects?
Answer:
"In my projects, we mostly followed feature branching model. Developers will create feature branches from main branch
  we do development in feature branches will deploy in to dev environment if it is success we will rise PR, we will merge
  to main branch we will deploy to QA, UAT, PRE-PROD, PROD"
  while doing deployment if we get defect we will again create feature branch we will fix defects and push this code to the main
  branch and we will deploy to all the environments


we have two branches 
 one is main branch
 second is feature branch

we will create the feature branch from main branch, will do the development then we will run the cicd, we will make sure that application is
successfully deployed in develpoment environment, once it is successfully deployed in dev environment our developers will rise a pull request to main branch
once PR is merged we will proceed to QA, UAT, PREPOD, PROD environmets, once it is successful we will go to the production ENV from main/master branch





3. How do you resolve merge conflicts in Git?
Answer:

"When thereâ€™s a merge conflict, I first do a git pull to bring the latest changes. 
If conflicts exist, Git marks them in the file. I manually edit the file to choose or combine the right code, 
then stage it using git add, and complete the merge with git commit. For bigger conflicts, 
I discuss with the developer who wrote the conflicting code to avoid overwriting important logic. 
I also make sure CI/CD pipelines pass after resolving the conflict."

i use git merge command 

when git absorbs different content in the same line number of main branch git can not take the decision 
which one to keep which one not to keep so it will show the conflict, it can not take decision on its own
Developers who are responsible for this conflict sit together and they will take proper decision






4. Whatâ€™s the difference between git fetch, git pull, and git clone?

Answer:
git clone â†’ Creates a local copy of a remote repo.
git fetch â†’ Brings changes from remote but doesnâ€™t merge them.
You want to check remote changes safely without affecting your working copy. Often used before pull requests or before merging.
git pull â†’ Fetches + merges changes into your local branch.
"In practice, I use git fetch when I want to review changes before merging, and git pull when I want to directly update my local branch."





5. Have you used Git tags? Why are they important?
Answer:
"Yes, I use Git tags for marking release versions, like v1.2.0. Tags are important because they give us a snapshot 
of the code at the time of release. This helps in rollbacks â€” for example, if a deployment fails in production, 
I can check out the previous release tag and redeploy."

Git tags are like labels or bookmarks that point to a specific commit in the Git history.
They are often used to mark release versions (v1.0, v2.5.1, etc.) so that we can easily refer back to them.
Unlike branches, tags donâ€™t move â€” they are fixed to a commit forever.



6. How do you handle rollback of code using Git?
Answer:
"There are a few ways depending on the situation:
If I need to undo the last commit but keep changes locally â†’ git reset --soft HEAD~1.
If I want to completely discard â†’ git reset --hard HEAD~1.
For production rollbacks, we usually checkout a stable tag or branch (like release-1.1) and redeploy.
This ensures we can quickly restore services without breaking workflows."


7. What is the difference between git rebase and git merge? Which one do you prefer?

Answer:

git merge â†’ Combines histories and creates a merge commit. Keeps history intact.
git rebase â†’ Reapplies commits on top of another branch, creating a cleaner linear history.
"I prefer rebase for feature branches to keep history clean, but for shared branches like develop or main, 
I prefer merge because itâ€™s safer and preserves the true history of collaboration."





8. How do you integrate Git with CI/CD pipelines?
Answer:
"We integrate Git with Jenkins using webhooks. When developers push code to GitHub or GitLab, 
it triggers Jenkins pipelines. The pipeline then runs unit tests, static code analysis (SonarQube), 
builds Docker images, and deploys to Kubernetes. We also enforce branch protection rules, 
so only reviewed and tested code gets merged to main."




9. Whatâ€™s the difference between Git and GitHub/GitLab/Bitbucket?
Answer:
"Git is the version control tool itself. GitHub, GitLab, and Bitbucket are hosting platforms for Git repositories 
that provide collaboration features like pull requests, code reviews, issue tracking, and CI/CD integration."



10. Have you worked with Git hooks?

Answer:
"Yes, Iâ€™ve used pre-commit hooks for running code formatters (like black for Python) and linting 
before committing code. Iâ€™ve also seen pre-push hooks used to run unit tests locally before pushing. 
This helps catch issues early before code even reaches the central repo."


git init
git config --global user.name <name>
git config --global user.email <email>


...or create a new repository on the command line
echo "# terraform-cicd" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/rajudonkeshwar/terraform-cicd.git
git push -u origin main
git pull --rebase
git push
git merge <branch-name>
git checkout <br-name>
git branch -D <branch-name> " if you want to delete the branch with out merging to main branch "
if you want to push the new branch to the central repo
git push <repo-link> branch-name
git push origin branch-namegit
git push origin tag-name < if you want to push the tag name to git-hub >

